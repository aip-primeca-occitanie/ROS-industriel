// Generated by gencpp from file com_arm/Calib_camera.msg
// DO NOT EDIT!


#ifndef COM_ARM_MESSAGE_CALIB_CAMERA_H
#define COM_ARM_MESSAGE_CALIB_CAMERA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace com_arm
{
template <class ContainerAllocator>
struct Calib_camera_
{
  typedef Calib_camera_<ContainerAllocator> Type;

  Calib_camera_()
    : point0(false)
    , point1(false)
    , point2(false)
    , point3(false)  {
    }
  Calib_camera_(const ContainerAllocator& _alloc)
    : point0(false)
    , point1(false)
    , point2(false)
    , point3(false)  {
  (void)_alloc;
    }



   typedef uint8_t _point0_type;
  _point0_type point0;

   typedef uint8_t _point1_type;
  _point1_type point1;

   typedef uint8_t _point2_type;
  _point2_type point2;

   typedef uint8_t _point3_type;
  _point3_type point3;





  typedef boost::shared_ptr< ::com_arm::Calib_camera_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::com_arm::Calib_camera_<ContainerAllocator> const> ConstPtr;

}; // struct Calib_camera_

typedef ::com_arm::Calib_camera_<std::allocator<void> > Calib_camera;

typedef boost::shared_ptr< ::com_arm::Calib_camera > Calib_cameraPtr;
typedef boost::shared_ptr< ::com_arm::Calib_camera const> Calib_cameraConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::com_arm::Calib_camera_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::com_arm::Calib_camera_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::com_arm::Calib_camera_<ContainerAllocator1> & lhs, const ::com_arm::Calib_camera_<ContainerAllocator2> & rhs)
{
  return lhs.point0 == rhs.point0 &&
    lhs.point1 == rhs.point1 &&
    lhs.point2 == rhs.point2 &&
    lhs.point3 == rhs.point3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::com_arm::Calib_camera_<ContainerAllocator1> & lhs, const ::com_arm::Calib_camera_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace com_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::Calib_camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::Calib_camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::Calib_camera_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::Calib_camera_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::Calib_camera_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::Calib_camera_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::com_arm::Calib_camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08b01bb680791f8362dea80ccacc5fb0";
  }

  static const char* value(const ::com_arm::Calib_camera_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08b01bb680791f83ULL;
  static const uint64_t static_value2 = 0x62dea80ccacc5fb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::com_arm::Calib_camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "com_arm/Calib_camera";
  }

  static const char* value(const ::com_arm::Calib_camera_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::com_arm::Calib_camera_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool point0\n"
"bool point1\n"
"bool point2\n"
"bool point3\n"
;
  }

  static const char* value(const ::com_arm::Calib_camera_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::com_arm::Calib_camera_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point0);
      stream.next(m.point1);
      stream.next(m.point2);
      stream.next(m.point3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Calib_camera_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::com_arm::Calib_camera_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::com_arm::Calib_camera_<ContainerAllocator>& v)
  {
    s << indent << "point0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.point0);
    s << indent << "point1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.point1);
    s << indent << "point2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.point2);
    s << indent << "point3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.point3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COM_ARM_MESSAGE_CALIB_CAMERA_H
