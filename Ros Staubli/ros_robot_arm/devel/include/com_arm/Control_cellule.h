// Generated by gencpp from file com_arm/Control_cellule.msg
// DO NOT EDIT!


#ifndef COM_ARM_MESSAGE_CONTROL_CELLULE_H
#define COM_ARM_MESSAGE_CONTROL_CELLULE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace com_arm
{
template <class ContainerAllocator>
struct Control_cellule_
{
  typedef Control_cellule_<ContainerAllocator> Type;

  Control_cellule_()
    : memoire()
    , val(0)  {
    }
  Control_cellule_(const ContainerAllocator& _alloc)
    : memoire(_alloc)
    , val(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _memoire_type;
  _memoire_type memoire;

   typedef int32_t _val_type;
  _val_type val;





  typedef boost::shared_ptr< ::com_arm::Control_cellule_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::com_arm::Control_cellule_<ContainerAllocator> const> ConstPtr;

}; // struct Control_cellule_

typedef ::com_arm::Control_cellule_<std::allocator<void> > Control_cellule;

typedef boost::shared_ptr< ::com_arm::Control_cellule > Control_cellulePtr;
typedef boost::shared_ptr< ::com_arm::Control_cellule const> Control_celluleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::com_arm::Control_cellule_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::com_arm::Control_cellule_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::com_arm::Control_cellule_<ContainerAllocator1> & lhs, const ::com_arm::Control_cellule_<ContainerAllocator2> & rhs)
{
  return lhs.memoire == rhs.memoire &&
    lhs.val == rhs.val;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::com_arm::Control_cellule_<ContainerAllocator1> & lhs, const ::com_arm::Control_cellule_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace com_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::Control_cellule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::Control_cellule_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::Control_cellule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::Control_cellule_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::Control_cellule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::Control_cellule_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::com_arm::Control_cellule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8355e28e75c846f16d2d77f7bdba3b7f";
  }

  static const char* value(const ::com_arm::Control_cellule_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8355e28e75c846f1ULL;
  static const uint64_t static_value2 = 0x6d2d77f7bdba3b7fULL;
};

template<class ContainerAllocator>
struct DataType< ::com_arm::Control_cellule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "com_arm/Control_cellule";
  }

  static const char* value(const ::com_arm::Control_cellule_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::com_arm::Control_cellule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string memoire\n"
"int32 val\n"
;
  }

  static const char* value(const ::com_arm::Control_cellule_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::com_arm::Control_cellule_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.memoire);
      stream.next(m.val);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_cellule_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::com_arm::Control_cellule_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::com_arm::Control_cellule_<ContainerAllocator>& v)
  {
    s << indent << "memoire: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.memoire);
    s << indent << "val: ";
    Printer<int32_t>::stream(s, indent + "  ", v.val);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COM_ARM_MESSAGE_CONTROL_CELLULE_H
