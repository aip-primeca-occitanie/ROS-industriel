// Generated by gencpp from file com_arm/Retour_celluleRequest.msg
// DO NOT EDIT!


#ifndef COM_ARM_MESSAGE_RETOUR_CELLULEREQUEST_H
#define COM_ARM_MESSAGE_RETOUR_CELLULEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace com_arm
{
template <class ContainerAllocator>
struct Retour_celluleRequest_
{
  typedef Retour_celluleRequest_<ContainerAllocator> Type;

  Retour_celluleRequest_()
    : memoire(0)  {
    }
  Retour_celluleRequest_(const ContainerAllocator& _alloc)
    : memoire(0)  {
  (void)_alloc;
    }



   typedef int32_t _memoire_type;
  _memoire_type memoire;





  typedef boost::shared_ptr< ::com_arm::Retour_celluleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::com_arm::Retour_celluleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Retour_celluleRequest_

typedef ::com_arm::Retour_celluleRequest_<std::allocator<void> > Retour_celluleRequest;

typedef boost::shared_ptr< ::com_arm::Retour_celluleRequest > Retour_celluleRequestPtr;
typedef boost::shared_ptr< ::com_arm::Retour_celluleRequest const> Retour_celluleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::com_arm::Retour_celluleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::com_arm::Retour_celluleRequest_<ContainerAllocator1> & lhs, const ::com_arm::Retour_celluleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.memoire == rhs.memoire;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::com_arm::Retour_celluleRequest_<ContainerAllocator1> & lhs, const ::com_arm::Retour_celluleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace com_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::Retour_celluleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::Retour_celluleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::Retour_celluleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d38585a9ace9d44e8aeed18cb0d33881";
  }

  static const char* value(const ::com_arm::Retour_celluleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd38585a9ace9d44eULL;
  static const uint64_t static_value2 = 0x8aeed18cb0d33881ULL;
};

template<class ContainerAllocator>
struct DataType< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "com_arm/Retour_celluleRequest";
  }

  static const char* value(const ::com_arm::Retour_celluleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 memoire\n"
;
  }

  static const char* value(const ::com_arm::Retour_celluleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.memoire);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Retour_celluleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::com_arm::Retour_celluleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::com_arm::Retour_celluleRequest_<ContainerAllocator>& v)
  {
    s << indent << "memoire: ";
    Printer<int32_t>::stream(s, indent + "  ", v.memoire);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COM_ARM_MESSAGE_RETOUR_CELLULEREQUEST_H
