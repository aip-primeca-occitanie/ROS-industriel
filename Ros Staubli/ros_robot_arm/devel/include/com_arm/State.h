// Generated by gencpp from file com_arm/State.msg
// DO NOT EDIT!


#ifndef COM_ARM_MESSAGE_STATE_H
#define COM_ARM_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace com_arm
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : isPowered(0)
    , isCalibrated(0)
    , workingMode(0)
    , esStatus(0)
    , moniteurSpeed(0)
    , shoulder(0)
    , elbow(0)
    , wrist(0)
    , isSettled(0)
    , flag(0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : isPowered(0)
    , isCalibrated(0)
    , workingMode(0)
    , esStatus(0)
    , moniteurSpeed(0)
    , shoulder(0)
    , elbow(0)
    , wrist(0)
    , isSettled(0)
    , flag(0)  {
  (void)_alloc;
    }



   typedef int32_t _isPowered_type;
  _isPowered_type isPowered;

   typedef int32_t _isCalibrated_type;
  _isCalibrated_type isCalibrated;

   typedef int32_t _workingMode_type;
  _workingMode_type workingMode;

   typedef int32_t _esStatus_type;
  _esStatus_type esStatus;

   typedef int32_t _moniteurSpeed_type;
  _moniteurSpeed_type moniteurSpeed;

   typedef int32_t _shoulder_type;
  _shoulder_type shoulder;

   typedef int32_t _elbow_type;
  _elbow_type elbow;

   typedef int32_t _wrist_type;
  _wrist_type wrist;

   typedef int32_t _isSettled_type;
  _isSettled_type isSettled;

   typedef int32_t _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::com_arm::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::com_arm::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::com_arm::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::com_arm::State > StatePtr;
typedef boost::shared_ptr< ::com_arm::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::com_arm::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::com_arm::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::com_arm::State_<ContainerAllocator1> & lhs, const ::com_arm::State_<ContainerAllocator2> & rhs)
{
  return lhs.isPowered == rhs.isPowered &&
    lhs.isCalibrated == rhs.isCalibrated &&
    lhs.workingMode == rhs.workingMode &&
    lhs.esStatus == rhs.esStatus &&
    lhs.moniteurSpeed == rhs.moniteurSpeed &&
    lhs.shoulder == rhs.shoulder &&
    lhs.elbow == rhs.elbow &&
    lhs.wrist == rhs.wrist &&
    lhs.isSettled == rhs.isSettled &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::com_arm::State_<ContainerAllocator1> & lhs, const ::com_arm::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace com_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::com_arm::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::com_arm::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::com_arm::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::com_arm::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3442225a740fff286fb5123e1a12991a";
  }

  static const char* value(const ::com_arm::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3442225a740fff28ULL;
  static const uint64_t static_value2 = 0x6fb5123e1a12991aULL;
};

template<class ContainerAllocator>
struct DataType< ::com_arm::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "com_arm/State";
  }

  static const char* value(const ::com_arm::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::com_arm::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 isPowered\n"
"int32 isCalibrated\n"
"int32 workingMode\n"
"int32 esStatus\n"
"int32 moniteurSpeed\n"
"int32 shoulder\n"
"int32 elbow\n"
"int32 wrist\n"
"int32 isSettled\n"
"int32 flag\n"
;
  }

  static const char* value(const ::com_arm::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::com_arm::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isPowered);
      stream.next(m.isCalibrated);
      stream.next(m.workingMode);
      stream.next(m.esStatus);
      stream.next(m.moniteurSpeed);
      stream.next(m.shoulder);
      stream.next(m.elbow);
      stream.next(m.wrist);
      stream.next(m.isSettled);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::com_arm::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::com_arm::State_<ContainerAllocator>& v)
  {
    s << indent << "isPowered: ";
    Printer<int32_t>::stream(s, indent + "  ", v.isPowered);
    s << indent << "isCalibrated: ";
    Printer<int32_t>::stream(s, indent + "  ", v.isCalibrated);
    s << indent << "workingMode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.workingMode);
    s << indent << "esStatus: ";
    Printer<int32_t>::stream(s, indent + "  ", v.esStatus);
    s << indent << "moniteurSpeed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.moniteurSpeed);
    s << indent << "shoulder: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shoulder);
    s << indent << "elbow: ";
    Printer<int32_t>::stream(s, indent + "  ", v.elbow);
    s << indent << "wrist: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wrist);
    s << indent << "isSettled: ";
    Printer<int32_t>::stream(s, indent + "  ", v.isSettled);
    s << indent << "flag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COM_ARM_MESSAGE_STATE_H
